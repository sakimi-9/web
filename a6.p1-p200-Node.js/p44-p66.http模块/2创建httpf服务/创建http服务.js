//1 http模块需要导入
const http = require('http');

//2 创建服务对象   浏览器向服务端发送请求，这里服务端是nodejs,设置nodejs端口后，监听函数监听到则启动服务
//              启动服务后，server对象接收来自浏览器请求报文的封装请求对象和来自自己服务端响应报文的封装响应对象，
// callback里设置请求封装对象和响应封装对象的相关数据
var server = http.createServer((request, response) => {
    let str = '我是响应报文的响应体';
    response.setHeader('content-type', 'text/html;charset=utf-8');//设置响应头  解决中文乱码
    // 头名‘content - type’ （内容 - 属性），头值‘text / html; charset = utf - 8’(文本 / 文档; 字符设置 = utf - 8编码)
    response.end(`${str} 
hello
\r\n http 2 <br> server`)//上面设置了响应头 ：内容-属性：文本/html文档;字符设置=utf-8编码  
    //所以支持html的语法，可以识别<br>换行， 还得设置js的才能识别 \r\n换行
})

//3 设置服务对象的监听函数（端口号设置，箭头函数执行任务），监听后启动服务   
//  这个任务是设置好监听函数运行代码就会执行 无论监听是否成功 
//  端口号是数值类型number，不是字符串string
server.listen(9000, () => {
    console.log('监听函数设置成功(nodejs的端口设置成功,启动服务···)');
})

// 注意事项
// 命令行里对应工作目录 CTRL+C 停止服务
// 更新代码后 要更新服务结果，需要 停止服务 重新运行代码 才行
// 端口占用 两种情况导致 1.上一个服务没停，新建服务又用同一个端口 2.这个终端窗口的服务没停，新开终端窗口运行同一个（同一端口）服务
// 端口占用 解决办法 1.新建服务用新的端口 2.关停当前端口的服务
// 端口占用的特殊情况 端口号早已被其他程序给占用了
// 如何解决 win键后 打开资源监视器，网络那一栏，打开侦听端口，根据那个端口号的PID，来资源管理器关停对应PID的服务
// HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443,
// 服务的监听函数设置默认端口后，地址栏输入URL时，可以不用输入端口号，因为默认指向默认端口号
// 百度哔哩哔哩，使用的就是默认端口号，所以输入URL时不用输入端口号也行，这也方便用户搜索



// \r ：将当前位置移到本行开头。又叫回车，对应键盘上的return键
// \n：将当前位置移到下一行开头。又叫换行，newline
// Windows操作系统，\r\n表示（回车并）换行

